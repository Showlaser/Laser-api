// <auto-generated />
using System;
using LaserAPI.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LaserAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220923194042_initial-create")]
    partial class initialcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("LaserAPI.Models.Dto.Animations.AnimationDto", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Uuid");

                    b.ToTable("Animation");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Animations.AnimationPointDto", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("BlueLaserPowerPwm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GreenLaserPowerPwm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PatternAnimationSettingsUuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("RedLaserPowerPwm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.HasKey("Uuid");

                    b.HasIndex("PatternAnimationSettingsUuid");

                    b.ToTable("AnimationPoint");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Animations.PatternAnimationDto", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AnimationUuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("StartTimeOffset")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeLineId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Uuid");

                    b.HasIndex("AnimationUuid");

                    b.ToTable("PatternAnimation");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Animations.PatternAnimationSettingsDto", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CenterX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CenterY")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PatternAnimationUuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rotation")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Scale")
                        .HasColumnType("REAL");

                    b.Property<int>("StartTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Uuid");

                    b.HasIndex("PatternAnimationUuid");

                    b.ToTable("PatternAnimationSetting");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.LasershowSpotify.LasershowSpotifyConnectorDto", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LasershowUuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Uuid");

                    b.ToTable("LasershowSpotifyConnector");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.LasershowSpotify.LasershowSpotifyConnectorSongDto", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LasershowSpotifyConnectorUuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpotifySongId")
                        .HasColumnType("TEXT");

                    b.HasKey("Uuid");

                    b.HasIndex("LasershowSpotifyConnectorUuid");

                    b.ToTable("LasershowSpotifyConnectorSongDto");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Patterns.PatternDto", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rotation")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Scale")
                        .HasColumnType("REAL");

                    b.Property<int>("XOffset")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YOffset")
                        .HasColumnType("INTEGER");

                    b.HasKey("Uuid");

                    b.ToTable("Pattern");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Patterns.PointDto", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("BlueLaserPowerPwm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConnectedToPointOrderNr")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GreenLaserPowerPwm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderNr")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PatternUuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("RedLaserPowerPwm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.HasKey("Uuid");

                    b.HasIndex("PatternUuid");

                    b.ToTable("Point");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Zones.ZoneDto", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxLaserPowerInZonePwm")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Uuid");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Zones.ZonesPositionDto", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ZoneUuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Uuid");

                    b.HasIndex("ZoneUuid");

                    b.ToTable("ZonePosition");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Animations.AnimationPointDto", b =>
                {
                    b.HasOne("LaserAPI.Models.Dto.Animations.PatternAnimationSettingsDto", null)
                        .WithMany("Points")
                        .HasForeignKey("PatternAnimationSettingsUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Animations.PatternAnimationDto", b =>
                {
                    b.HasOne("LaserAPI.Models.Dto.Animations.AnimationDto", null)
                        .WithMany("PatternAnimations")
                        .HasForeignKey("AnimationUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Animations.PatternAnimationSettingsDto", b =>
                {
                    b.HasOne("LaserAPI.Models.Dto.Animations.PatternAnimationDto", null)
                        .WithMany("AnimationSettings")
                        .HasForeignKey("PatternAnimationUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.LasershowSpotify.LasershowSpotifyConnectorSongDto", b =>
                {
                    b.HasOne("LaserAPI.Models.Dto.LasershowSpotify.LasershowSpotifyConnectorDto", null)
                        .WithMany("SpotifySongs")
                        .HasForeignKey("LasershowSpotifyConnectorUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Patterns.PointDto", b =>
                {
                    b.HasOne("LaserAPI.Models.Dto.Patterns.PatternDto", null)
                        .WithMany("Points")
                        .HasForeignKey("PatternUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Zones.ZonesPositionDto", b =>
                {
                    b.HasOne("LaserAPI.Models.Dto.Zones.ZoneDto", null)
                        .WithMany("Points")
                        .HasForeignKey("ZoneUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Animations.AnimationDto", b =>
                {
                    b.Navigation("PatternAnimations");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Animations.PatternAnimationDto", b =>
                {
                    b.Navigation("AnimationSettings");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Animations.PatternAnimationSettingsDto", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.LasershowSpotify.LasershowSpotifyConnectorDto", b =>
                {
                    b.Navigation("SpotifySongs");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Patterns.PatternDto", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("LaserAPI.Models.Dto.Zones.ZoneDto", b =>
                {
                    b.Navigation("Points");
                });
#pragma warning restore 612, 618
        }
    }
}
